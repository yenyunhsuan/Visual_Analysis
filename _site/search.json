[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "Author\nYen Yun Hsuan (Tina)\n- LinkedIn\n- Email"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1 Introduction to Visual Analytics",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nlibrary(readr)\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#bar-chart",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#bar-chart",
    "title": "Hands-on Exercise 1 Introduction to Visual Analytics",
    "section": "Bar chart",
    "text": "Bar chart\n\nggplot(data=exam_data,\n       aes(x=RACE))+\n  geom_bar()\n\n\n\n\n\nHorizontal bar chart\nUse coordinate to change bar into horizontal\n\nggplot(data=exam_data,\n       aes(x=RACE))+\n  geom_bar()+\n  coord_flip()+\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#histogram",
    "title": "Hands-on Exercise 1 Introduction to Visual Analytics",
    "section": "Histogram",
    "text": "Histogram\n\nhist(exam_data$MATHS)\n\n\n\n\ndefault setting of bins are 30\n\nggplot(data=exam_data,aes(x=MATHS))+\n  geom_histogram(bins=10, \n                color='red',\n                 fill='blue')+\n  ggtitle(\"Histogram\")\n\n\n\n\n\nggplot(data=exam_data,aes(x=MATHS,fill=GENDER))+\n  geom_histogram(bins=20, color=\"grey30\")#color in histogram is bin line color"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#density-plot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#density-plot",
    "title": "Hands-on Exercise 1 Introduction to Visual Analytics",
    "section": "Density plot",
    "text": "Density plot\nit is a good way to replace histogram for continuous data if its distribution is smooth\n\nggplot(data=exam_data,aes(x=MATHS,colour=GENDER))+\n  geom_density()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#dotplot",
    "title": "Hands-on Exercise 1 Introduction to Visual Analytics",
    "section": "Dotplot",
    "text": "Dotplot\n\nggplot(data=exam_data,aes(x=MATHS))+\n  geom_dotplot(dotsize=0.5,binwidth = 3)+\n  scale_y_continuous(NULL,breaks = NULL) #remove y-axis value"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#boxplot-and-notch",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#boxplot-and-notch",
    "title": "Hands-on Exercise 1 Introduction to Visual Analytics",
    "section": "Boxplot and Notch",
    "text": "Boxplot and Notch\nNotch(缺口) can check by whether notches are overlapping to see whether medians are the same\n\nggplot(data=exam_data,aes(x=GENDER,y=MATHS))+\n  geom_boxplot(notch=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#violin-plot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#violin-plot",
    "title": "Hands-on Exercise 1 Introduction to Visual Analytics",
    "section": "Violin Plot",
    "text": "Violin Plot\nCan compare more clearly about the difference of distributions of multiple data\n\nggplot(data=exam_data,aes(x=GENDER,y=MATHS))+\n  geom_violin()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#scatter-plot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#scatter-plot",
    "title": "Hands-on Exercise 1 Introduction to Visual Analytics",
    "section": "Scatter plot",
    "text": "Scatter plot\n\nggplot(data=exam_data,aes(x=ENGLISH,y=MATHS))+\n  geom_point()+\n  geom_smooth()+\n  coord_cartesian(xlim=c(0,100),ylim=c(0,100))\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\nCombine scatter and boxplot\n\nggplot(data=exam_data,aes(x=GENDER,y=MATHS))+\n  geom_point(position=\"jitter\",size=0.2)+\n  geom_boxplot()\n\n\n\n\n\n\nStatistical summary\nAdd statistical summary can use stat_summary or overwrite by a new geom_ setting\n\nggplot(data=exam_data,aes(x=GENDER,y=MATHS))+\n  geom_point(position='jitter')+\n  geom_boxplot()+\n  stat_summary(geom=\"point\",fun='mean',color='red',size=4)\n\n\n\n\n\nggplot(data=exam_data,aes(x=GENDER,y=MATHS))+\n  geom_boxplot()+\n  geom_point(stat=\"summary\",        \n             colour =\"red\",          \n             size=4)\n\nNo summary function supplied, defaulting to `mean_se()`"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#create-2d-panel",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#create-2d-panel",
    "title": "Hands-on Exercise 1 Introduction to Visual Analytics",
    "section": "Create 2D panel",
    "text": "Create 2D panel\n\nggplot(data=exam_data,aes(x=MATHS))+\n  geom_histogram(bins=20)+\n  facet_wrap(~CLASS)\n\n\n\n\n\nFacet_grid\nTwo discrete variables can use facet_grid\n\nggplot(data=exam_data,aes(x=MATHS))+\n  geom_histogram(bins=20)+\n  facet_grid(~CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "exam_data <- read.csv(\"data/Exam_data.csv\")\n\n\nggrepel\nAn extension of ggplot that can deal with overlapping text For example, add “_repel” to geom_label\n\nggplot(data=exam_data,aes(x=MATHS,y=ENGLISH))+\n  geom_point()+\n  geom_smooth(method=lm,linewidth=0.5)+\n  geom_label_repel(aes(label=ID),fontface='bold')+ \n  coord_cartesian(xlim=c(0,100),ylim=c(0,100))+ \n  ggtitle('English scores versus Maths scores for Primary 3\"')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\n\nggplot theme\n\np1 <- ggplot(data=exam_data,aes(x=MATHS))+\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color='grey25',\n                 fill='grey90')+\n  theme_gray()+\n  ggtitle(\"Distribution of math scores\")\np1\n\n\n\n\n\nggplot(data=exam_data,aes(x=MATHS))+\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color='grey25',\n                 fill='grey90')+\n  theme_economist()+\n  ggtitle(\"Distribution of math scores\")\n\n\n\n\n\n\nWorking with hrbthems package\nMore fonts and label placements choices, adjust by axis_title size, base_size, axis_text_size\n\nggplot(data=exam_data,aes(x=MATHS))+\n  geom_histogram(bins=20,boundary=100,\n                 fill='grey25',\n                 color='grey90')+\n  ggtitle(\"Distribution of math scores\")+\n  theme_ipsum(axis_title_size = 20,base_size=20,grid='Y') \n\n\n\n\n\n\nBeyond Single Graph\n\np2 <- ggplot(data=exam_data,aes(x=ENGLISH))+\n  geom_histogram(bins=20, boundary=100,fill='grey20',color='grey90')+\n  ggtitle(\"Distribution of English score\")+\n  coord_cartesian(xlim=c(0,100))\np2\n\n\n\n\n\np3 <- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\np3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nCombining two ggplot2 graphs\n\np1|p2\n\n\n\n\n“|” operator to stack two ggplot2 graphs,\n“/” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting\n\n\nAdd tag\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nPlace plots on top of below other plots\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nUse patchwork and ggtheme\n\npatchwork <- p3| (p1 / p2)\npatchwork & theme_economist()+theme(plot.title = element_text(size = 9))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data",
    "title": "Hands-on_Ex03",
    "section": "Import data",
    "text": "Import data\n\nexam_data <- read.csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-graph-with-ggiraphtooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-graph-with-ggiraphtooltip",
    "title": "Hands-on_Ex03",
    "section": "Interactive graph with ggiraph,tooltip",
    "text": "Interactive graph with ggiraph,tooltip\n\nTooltip effect with tooltip aesthetic\n\nTooltip: show label when mouse scroll on it\nhistodot: dot stacks vertically\nsvg: Scalable Vector Graphics(adjust size so can with good resolution) for html page\nratio of 0.618 is a recommended ratio for visually pleasing\n\n\nplot <- ggplot(data=exam_data,aes(x=MATHS))+\n  geom_dotplot_interactive(aes(tooltip=ID),\n                           stackgroups=TRUE,\n                           binwidth=1,\n                           method='histodot')+\n    scale_y_continuous(NULL,breaks=NULL)\ngirafe(\n  ggobj=plot,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\nDisplaying multiple information\n\nUse “$” to extract specific column from dataframe\n“paste0” to concatenate string\n\n\nexam_data$tooltip <- c(paste0(\n  \"Name =\", exam_data$ID, \"\\n Class =\", exam_data$CLASS\n))\nplot <- ggplot(data=exam_data,aes(x=MATHS))+\n  geom_dotplot_interactive(aes(tooltip=exam_data$tooltip),\n                           stackgroups=TRUE,\n                           binwidth=1,\n                           method='histodot')+\n    scale_y_continuous(NULL,breaks=NULL)\n\ngirafe(\n  ggobj=plot,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nWarning: Use of `exam_data$tooltip` is discouraged.\nℹ Use `tooltip` instead.\n\n\n\n\n\n\n\n\nCustomising Tooltip\nUse opts_tooltip() to customize interactive label s font and color\n\ntooltip_css <- \"background-color:white;\nfont-style:bold; color:blue;\"\n\nplot <- ggplot(data=exam_data,aes(x=MATHS))+\n  geom_dotplot_interactive(aes(tooltip=ID),\n                           stackgroups=TRUE,\n                           binwidth=1,\n                           method=\"histodot\")+\n  scale_y_continuous(NULL,breaks=NULL)\n\ngirafe(\n  ggobj=plot,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_tooltip(\n      css=tooltip_css))\n)\n\n\n\n\n\n\n\nDisplaying statistics\n\naccuracy: 0.01 means to round to two decimal places\nymax: upper limit of 90% interval of y, y: average\nscales::number is to format value with accuracy (0.01)\nafter_stat:tooltip applied after calculating statistic values\nfun.data: summary statistics, mean_se:calculate mean and standard error\n\n\ntooltip <- function(y,ymax,accuracy=0.001){\n  mean <- scales::number(y,accuracy=accuracy)\n  se <- scales::number(ymax-y,accuracy = accuracy)\n  paste0(\"Mean math scores\",mean,\" +/- \",se)\n}\n\ngg_point <- ggplot(data=exam_data,aes(x=RACE)\n               )+\n  stat_summary(aes(y=MATHS,\n                   tooltip=after_stat(\n                     tooltip(y,ymax))),\n  fun.data=\"mean_se\",\n  geom=GeomInteractiveCol,\n  fill=\"lightblue\"\n    )+\n  stat_summary(aes(y=MATHS),\n  fun.data=\"mean_se\",\n  geom=\"errorbar\",width=0.2,size=0.2)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\ngirafe(\n  ggobj=gg_point,\n  width_svg = 8,\n  height_svg = 8*0.6188)\n\n\n\n\n\n\n\nHighlight effect\ndata_id allows highlighting effect on dotplot with defined category, default setting is filling with orange color.\n\nplot <- ggplot(data=exam_data,aes(x=MATHS))+\n  geom_dotplot_interactive(aes(data_id=CLASS),\n                           stackgroups=TRUE,\n                           binwidth=1,\n                           method=\"histodot\")+\n  scale_y_continuous(NULL,breaks=NULL)\n\ngirafe(\n  ggobj=plot,\n  width_svg = 6,\n  height_svg=6*0.618\n)\n\n\n\n\n\n\n\nChanging hovering color setting\nopacity: changing the transparency, opacity=0.2 means with 80% transparency\n\nplot <- ggplot(data=exam_data,aes(x=MATHS))+\n  geom_dotplot_interactive(aes(data_id=CLASS),\n                           stackgroups=TRUE,\n                           binwidth=1,\n                           method=\"histodot\")+\n  scale_y_continuous(NULL,breaks=NULL)\n\ngirafe(\n  ggobj=plot,\n  width_svg = 6,\n  height_svg=6*0.618,\n  options = list(\n    opts_hover(css=\"fill: #202020;\"),\n    opts_hover_inv(css=\"opacity:0.1;\")\n    \n  )\n)\n\n\n\n\n\n\n\nCombine tooltip(label) and hovering effect\n\nplot <- ggplot(data=exam_data,aes(x=MATHS))+\n  geom_dotplot_interactive(\n    aes(tooltip=CLASS,data_id=CLASS),\n    stackgroups=TRUE,\n    binwidth=2,\n    method=\"histodot\"\n  )+\n  scale_y_continuous(NULL,breaks=NULL)\n\ngirafe(\n  ggobj=plot,\n  width_svg=6,\n  height_svg=6*0.618,\n  options = list(\n    opts_hover(css=\"fill:#202020;\"),\n    opts_hover_inv(css=\"opacity:0.2;\")\n  )\n  \n)\n\n\n\n\n\n\n\nInsert link on the graph\n\nadd onclick column to exam_data\nsprintf: combine new string with URL\n“%s%s”, first %s is the link, second %s is new adding string\nas.character: convert to character(string) type, and adding to URL\n\n\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\",\n \"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\n as.character(exam_data$ID))\n\nplot <- ggplot(data=exam_data,aes(x=MATHS))+\n  geom_dotplot_interactive(\n    aes(onclick=onclick),\n    stackgroups=TRUE,\n    binwidth=2,\n    method=\"histodot\"\n  )+\n  scale_y_continuous(NULL,breaks=NULL)\n\ngirafe(\n  ggobj=plot,\n  width_svg=6,\n  height_svg=6*0.618\n  \n)\n\n\n\n\n\n\n\nCoordinate multiple views\n\nopts_hover: setting about hovering point\nopts_hover_inv: setting for other part when hovering\n\n\nplot1 <- ggplot(data=exam_data,aes(x=MATHS))+\n  geom_dotplot_interactive(\n    aes(data_id=ID),\n    stackgroups=TRUE,\n    binwidth=2,\n    method=\"histodot\"\n  )+\n  coord_cartesian(xlim=c(0,100))+\n  scale_y_continuous(NULL,breaks=NULL)\n\nplot2 <- ggplot(data=exam_data,aes(x=ENGLISH))+\n  geom_dotplot_interactive(\n    aes(data_id=ID),\n    stackgroups=TRUE,\n    binwidth=2,\n    method=\"histodot\"\n  )+\n  coord_cartesian(xlim=c(0,100))+\n  scale_y_continuous(NULL,breaks=NULL)\n\ngirafe(code = print(plot1+plot2),\n  width_svg=6,\n  height_svg=3,\n  options=list(\n    opts_hover(css=\"fill: #202020;\"),\n    opts_hover_inv(css=\"opacity:0.2;\")\n  \n))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-graphs-by-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-graphs-by-plotly",
    "title": "Hands-on_Ex03",
    "section": "Interactive graphs by plotly",
    "text": "Interactive graphs by plotly\n\nInteractive scatter plot\n\n#|message: false\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -> https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\nAdding visual effect\n\nplot_ly(data= exam_data,\n       x= ~MATHS,\n       y= ~ENGLISH,\n       color= ~RACE)\n\n\n\n\n\n\n\nCoordinate multiple views\n\nhighlight_key: create shared data for two plots\nsubplot: coordinate two plots together\n\n\nd <- highlight_key(exam_data)\n\np1 <- ggplot(data=d,aes(x=MATHS,y=ENGLISH))+\n  geom_point(size=2)+\n  coord_cartesian(xlim=c(0,100),ylim=c(0,100))\n\np2 <- ggplot(data=d,aes(x=MATHS,y=SCIENCE))+\n  geom_point(size=2)+\n  coord_cartesian(xlim=c(0,100),ylim=c(0,100))\n\nsubplot(ggplotly(p1),ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-graphs-by-ggplotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-graphs-by-ggplotly",
    "title": "Hands-on_Ex03",
    "section": "Interactive graphs by ggplotly",
    "text": "Interactive graphs by ggplotly\n\nplot <- ggplot(data=exam_data,aes(x=MATHS,y=ENGLISH))+\n  geom_point(size=2)+\n  coord_cartesian(xlim=c(0,100),ylim=c(0,100))\n\n\nggplotly(plot)\n\n\n\n\n\n\nData table\nclass=“compact” means to have compact layout for the table\n\nDT::datatable(exam_data,class=\"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#link-table-with-graph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#link-table-with-graph",
    "title": "Hands-on_Ex03",
    "section": "Link table with graph",
    "text": "Link table with graph\n\nhighlight_key: assign identifier to dataframe\nplotly_selected: track corresponding point when mouse click on table row\ncrosstalk: combine table and graph\nbscols: create layout with two elements\n\n\ndata <- highlight_key(exam_data)\n\np <- ggplot(data,aes(ENGLISH,MATHS))+\n  geom_point(siz=1)+\n  coord_cartesian(xlim=c(0,100),ylim=c(0,100))\n\nWarning in geom_point(siz = 1): Ignoring unknown parameters: `siz`\n\ngg <- highlight(ggplotly(p),\"plotly_selected\")\n\ncrosstalk::bscols(gg,DT::datatable(data),widths = 5)\n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data-1",
    "title": "Hands-on_Ex03",
    "section": "Import data",
    "text": "Import data\n\nmutate_each or mutate(across())：apply given function to selected columns\n%>% pass function/results to next step\nfuns all all_of: create a list of function\nfactor: turn column into categorical variable\n\n\ncol <- c(\"Country\",\"Continent\")\nglobal <- read_xls(\"data/GlobalPopulation.xls\",\n                   sheet=\"Data\") %>% \n  mutate(across(all_of(col), factor)) %>% \n  mutate(Year=as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#population-bubble-plot",
    "title": "Hands-on_Ex03",
    "section": "Population bubble plot",
    "text": "Population bubble plot\n\nstatic plot\n\nggplot(global,aes(x=Old,y=Young,size=Population,colour=Country))+\n  geom_point(alpha=0.7,show.legend = FALSE)+\n  scale_color_manual(values=country_colors)+\n  scale_size(range=c(2,10))+\n  labs(title='Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')\n\n\n\n\n\n\nAnimated plot with gganimate\nease_aes(): the moving way of plot element, default is linear\n\nggplot(global,aes(x=Old,y=Young,size=Population,colour=Country))+\n  geom_point(alpha=0.7,show.legend = FALSE)+\n  scale_color_manual(values=country_colors)+\n  scale_size(range=c(2,10))+\n  labs(title='Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')+\n  transition_time(Year)+\n  ease_aes(\"linear\")\n\n\n\n\n\n\nAnimated plot with ggplotly\n\nplot <- ggplot(global,aes(x=Old,y=Young,size=Population,colour=Country))+\n  geom_point(aes(size=Population, frame=Year),\n             alpha=0.7,show.legend = FALSE)+\n  scale_color_manual(values=country_colors)+\n  scale_size(range=c(2,10))+\n  labs( x = '% Aged', \n       y = '% Young')\n\nWarning in geom_point(aes(size = Population, frame = Year), alpha = 0.7, :\nIgnoring unknown aesthetics: frame\n\nggplotly(plot)\n\nWarning in p$x$data[firstFrame] <- p$x$frames[[1]]$data: number of items to\nreplace is not a multiple of replacement length\n\n\n\n\n\n\n\n\nUsing plot_ly()\n\nbp <- global %>%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent, \n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          )\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on_Ex04",
    "section": "",
    "text": "pacman::p_load(tidyverse, plotly, crosstalk, DT, ggdist, gganimate,ggstatsplot,readxl, performance, parameters, see)\n\n\nlibrary(readr)\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nset.seed(1234)\ngghistostats(data=exam_data,x=ENGLISH, type=\"bayes\",\n             test.values=70,xlab=\"English score\")\n\n\n\n\n\n\n\nCompare distribution/density of female and male performance in Math test\n\nggbetweenstats(\n  data=exam_data,\n  x=GENDER,\n  y=MATHS,\n  type='np',\n  message=FALSE)\n\n\n\n\n\n\n\n\nggbetweenstats(data=exam_data,\n               x=RACE,\n               y=ENGLISH,\n               type='p',\n               mean.ci=TRUE,\n               pairwise.comparisons = TRUE,\n               pairwise.display = 's',\n               p.adjust.method = 'fdr',\n               message=FALSE\n               )\n\n\n\n\n\n\n\nCan see Pearson correlation coefficient\n\nggscatterstats(data=exam_data,\n               x=MATHS,\n               y=ENGLISH,\n               marginal = FALSE\n               )\n\n\n\n\n\n\n\n\nexam=exam_data %>% \n  mutate(MATHS_bins=\n           cut(MATHS,\n               breaks=c(0,60,75,85,100)))\n\nggbarstats(data=exam,\n           x=MATHS_bins,\n           y=GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#toyota-corolla-case-with-linear-regression",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#toyota-corolla-case-with-linear-regression",
    "title": "Hands-on_Ex04",
    "section": "Toyota Corolla case with linear regression",
    "text": "Toyota Corolla case with linear regression\n\nImport the data\n\nresale_car <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncolnames(resale_car)\n\n [1] \"Id\"               \"Model\"            \"Price\"            \"Age_08_04\"       \n [5] \"Mfg_Month\"        \"Mfg_Year\"         \"KM\"               \"Quarterly_Tax\"   \n [9] \"Weight\"           \"Guarantee_Period\" \"HP_Bin\"           \"CC_bin\"          \n[13] \"Doors\"            \"Gears\"            \"Cylinders\"        \"Fuel_Type\"       \n[17] \"Color\"            \"Met_Color\"        \"Automatic\"        \"Mfr_Guarantee\"   \n[21] \"BOVAG_Guarantee\"  \"ABS\"              \"Airbag_1\"         \"Airbag_2\"        \n[25] \"Airco\"            \"Automatic_airco\"  \"Boardcomputer\"    \"CD_Player\"       \n[29] \"Central_Lock\"     \"Powered_Windows\"  \"Power_Steering\"   \"Radio\"           \n[33] \"Mistlamps\"        \"Sport_Model\"      \"Backseat_Divider\" \"Metallic_Rim\"    \n[37] \"Radio_cassette\"   \"Tow_Bar\"         \n\n\n\n\nBuild multiple linear regression\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = resale_car)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = resale_car)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\nCheck multicollinearity\nOne way to detect multicollinearity (whether independent variables are highly correlated) is to calculate the variance inflation factor (VIF) for each independent variable.\n\nc <- check_collinearity(model)\nplot(c)\n\n\n\n\n\n\nChecking normality assumption\nBuild model1(remove one highly correlated variable of mfg_year)\n\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = resale_car)\ncheck_n <- check_normality(model1)\nplot(check_n)\n\n\n\n\n\n\nCheck model for homogeneity of variances\nSignificance testing for linear regression models assumes that the model errors (or residuals) have constant variance.\n\ncheck_v <- check_heteroscedasticity(model1)\nplot(check_v)\n\n\n\n\n\n\nComplete check\nCan also check all the assumptions by one step. Influential observation is an observation in a dataset that, when removed, dramatically changes the coefficient estimates of a regression model\n\ncheck_model(model1)\n\n\n\n\n\n\nParameter plot\nSee the coefficient direction and strength in the plot.\n\nplot(parameters(model1))\n\n\n\n\n\n\nVisualising Regression Parameters\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualize-uncertainty-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualize-uncertainty-of-point-estimates",
    "title": "Hands-on_Ex04",
    "section": "Visualize uncertainty of point estimates",
    "text": "Visualize uncertainty of point estimates\n\npoint estimate such as mean, addressed with uncertainty like CI se: standard error measures the variability of the sample means, estimate the precision of the sample mean as an estimate of the population mean.\nsd/sqrt(n-1), n-1 can been thought as degree of freedom\n\n\nsum_num <- exam_data %>% \n  group_by(RACE) %>% \n  summarise(n=n(),\n            mean=round(mean(MATHS),2),\n            sd=round(sd(MATHS),2)) %>% \n  mutate(se=round(sd/sqrt(n-1),2))\n\nsum_num\n\n# A tibble: 4 × 5\n  RACE        n  mean    sd    se\n  <chr>   <int> <dbl> <dbl> <dbl>\n1 Chinese   193  76.5  15.7  1.13\n2 Indian     12  60.7  23.4  7.04\n3 Malay     108  57.4  21.1  2.04\n4 Others      9  69.7  10.7  3.79\n\n\n\nknitr::kable(head(sum_num),format='html')\n\n\n\n \n  \n    RACE \n    n \n    mean \n    sd \n    se \n  \n \n\n  \n    Chinese \n    193 \n    76.51 \n    15.69 \n    1.13 \n  \n  \n    Indian \n    12 \n    60.67 \n    23.35 \n    7.04 \n  \n  \n    Malay \n    108 \n    57.44 \n    21.13 \n    2.04 \n  \n  \n    Others \n    9 \n    69.67 \n    10.72 \n    3.79 \n  \n\n\n\n\n\n\nStandard error visulization\n\nggplot(sum_num)+\n  geom_errorbar(\n    aes(x=RACE,\n        ymin=mean-se,\n        ymax=mean+se),\n    width=0.2,\n    color='black',\n    alpha=0.9,\n    size=1)+\n  geom_point(aes(x=RACE,\n                 y=mean),\n             stat='identity',\n             color='red',\n             size=2,\n             alpha=1)+\n  ggtitle(\"Standard error of mean \n          maths score by race\")\n\n\n\n\n\n\n95% Confidence interval\nuse qnorm(0.975)=1.96 to calculate lower and upper bound\n\nsum_num$RACE <- factor(sum_num$RACE,levels = sum_num$RACE[order(-sum_num$mean)])\nggplot(sum_num)+\n  geom_errorbar(\n    aes(x=RACE,\n        ymin=mean-1.96*se,\n        ymax=mean+1.96*se),\n    width=0.2,\n    color='black',\n    alpha=0.95,\n    size=1)+\n  geom_point(aes(x=RACE,\n                 y=mean),\n             stat='identity',\n             color='red',\n             size=2,\n             alpha=1)+\n  ggtitle(\"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\nUncertainty of point estimates with interactive error bars\n\ndata <- highlight_key(sum_num)\np <- ggplot(data)+\n  geom_errorbar(\n    aes(x=RACE,\n        ymin=mean-2.32*se,\n        ymax=mean+2.32*se),\n    width=0.2,\n    color='black',\n    alpha=0.99,\n    size=1)+\n  geom_point(aes(x=RACE,\n                 y=mean),\n             stat='identity',\n             color='red',\n             size=2,\n             alpha=1)+\n  ggtitle(\"99% confidence interval of mean maths score by race\")\n\ngg <- highlight(ggplotly(p),\"plotly_selected\")\n\ncrosstalk::bscols(gg,DT::datatable(data),widths = 5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfidence interval plot with ggdist\n\nexam_data %>% \n  ggplot(aes(x=RACE,y=MATHS,))+\n  stat_pointinterval()+\n  labs(\n    title=\"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Confidence-interval plot\")\n\n\n\n\n\n\nUse stat_gradientinterval\n\nexam_data %>% \n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(\n    fill='skyblue',\n    show.legend=TRUE\n  )+\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\"\n  )\n\n\n\n\n\n\nHypothetical Outcome Plots\n\nlibrary(ungeviz)\n\nSample 25 data each time, and plot horizontal line grouping by race.\n\nggplot(data=exam_data,\n       aes(x=factor(RACE),y=MATHS))+\n  geom_point(position=position_jitter(),size=0.5)+\n  geom_hpline(data=sampler(25,group = RACE),color = \"#D55E00\",size=0.1)+\n  theme_bw()\n\n\n\n\n\nTransition_states means create sequence of frames to have animation of changes\nDraw indicating generating a column of sampling, starting with first frame to the twentieth frame\n\n\nggplot(data=exam_data,\n       aes(x=factor(RACE),y=MATHS))+\n  geom_point(position=position_jitter(),size=0.5)+\n  geom_hpline(data=sampler(25,group = RACE),color = \"#D55E00\",size=0.1)+\n  theme_bw()+\n  transition_states(.draw,1,20)\n\n\n\n\n\nexam_data\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnel-plots-for-fair-comparisons",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnel-plots-for-fair-comparisons",
    "title": "Hands-on_Ex04",
    "section": "Funnel Plots for Fair Comparisons",
    "text": "Funnel Plots for Fair Comparisons\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\ncovid19 <- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %>% \n  mutate_if(is.character,as.factor)\ncovid19\n\n# A tibble: 267 × 7\n   `Sub-district ID` City       District `Sub-district` Positive Recovered Death\n               <dbl> <fct>      <fct>    <fct>             <dbl>     <dbl> <dbl>\n 1        3172051003 JAKARTA U… PADEMAN… ANCOL              1776      1691    26\n 2        3173041007 JAKARTA B… TAMBORA  ANGKE              1783      1720    29\n 3        3175041005 JAKARTA T… KRAMAT … BALE KAMBANG       2049      1964    31\n 4        3175031003 JAKARTA T… JATINEG… BALI MESTER         827       797    13\n 5        3175101006 JAKARTA T… CIPAYUNG BAMBU APUS         2866      2792    27\n 6        3174031002 JAKARTA S… MAMPANG… BANGKA             1828      1757    26\n 7        3175051002 JAKARTA T… PASAR R… BARU               2541      2433    37\n 8        3175041004 JAKARTA T… KRAMAT … BATU AMPAR         3608      3445    68\n 9        3171071002 JAKARTA P… TANAH A… BENDUNGAN HIL…     2012      1937    38\n10        3175031002 JAKARTA T… JATINEG… BIDARA CINA        2900      2773    52\n# ℹ 257 more rows\n\n\nPR: proportional ratio, indicates that the data represents the ratio of the numerator (deaths) to the denominator (positive cases) for each sub-district\n\nfunnel_plot(numerator = covid19$Death,denominator = covid19$Positive,\n            group=covid19$`Sub-district`,\n            data_type = \"PR\",\n            x_range = c(0,6500),\n            y_range=c(0,0.05),\n            label=NA,\n            title = \"COVID-19 Fatality Rate by Positive Cases\",\n            x_label=\"Cumulative COVID-19 Positive Cases\",\n            y_label=\"Cumulative Fatality Rate\"\n            )\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\nCustomnized funnel plot\n\nStandard error formula for probability: √ [p (1-p) / n)\nUse reciprocal and square so bigger standard error can have bigger weight in the weighted mean\nseq function generates a sequence of number from 1 to maximum value of positive, incremental by 1, so that can count confidence interval of different sample size\n\n\n\nShow code\ndf <- covid19 %>% \n  mutate(rate=Death/Positive) %>% \n  mutate(rate.se=sqrt(rate*(1-rate)/Positive)) %>% \n  filter(rate>0)\n\nfit.mean <- weighted.mean(df$rate,1/(df$rate.se^2))\n\nnumber <- seq(1,max(df$Positive),1)\nupper.95 <- fit.mean+1.96*sqrt(fit.mean*(1-fit.mean)/number)\nlower.95 <- fit.mean-1.96*sqrt(fit.mean*(1-fit.mean)/number)\nupper.99 <- fit.mean+3.29*sqrt(fit.mean*(1-fit.mean)/number)\nlower.99 <- fit.mean-3.29*sqrt(fit.mean*(1-fit.mean)/number)\ntable <- data.frame(upper.95,lower.95,upper.99,lower.99,number,fit.mean)\n\np <-ggplot(df,aes(x=Positive,y=rate))+\n  geom_point(aes(label=(label=`Sub-district`),alpha=0.4))+\n  geom_line(data=table,aes(x=number,y=upper.95),size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\")+\n  geom_line(data=table,aes(x=number,y=lower.95),size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\")+\n  geom_line(data=table,aes(x=number,y=upper.99),size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\")+\n   geom_line(data=table,aes(x=number,y=lower.99),size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\")+\n  geom_hline(data=table,aes(yintercept=fit.mean),size = 0.4, \n             colour = \"grey40\")+\n             coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\n        \np\n\n\n\n\n\n\n\nInteractive plot\n\ninterative_p <-ggplotly(p,tooltip=c(\"label\",\"x\",\"y\"))\ninterative_p"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on_Ex05",
    "section": "",
    "text": "Show the code\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_edges",
    "title": "Hands-on_Ex05",
    "section": "2.4.1 Working with facet_edges()",
    "text": "2.4.1 Working with facet_edges()\n\n\nShow the code\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Frequency), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)+\n  theme(legend.position = \"bottom\")\n\ng + facet_edges(~Weekday)\n\n\n\n\n\nA framed facet graph\n\n\nShow the code\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Frequency), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)+\n  th_foreground(foreground = \"grey80\",\n                border = TRUE)+\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_nodes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_nodes",
    "title": "Hands-on_Ex05",
    "section": "2.4.2 Working with facet_nodes()",
    "text": "2.4.2 Working with facet_nodes()\n\n\nShow the code\nset_graph_style()\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Frequency), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",\n                border = TRUE)\n\n\n\n\n\nShow the code\n  theme(legend.position = \"bottom\")\n\n\nList of 1\n $ legend.position: chr \"bottom\"\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi FALSE\n - attr(*, \"validate\")= logi TRUE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-centrality-indices",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-centrality-indices",
    "title": "Hands-on_Ex05",
    "section": "2.5.1 Computing centrality indices",
    "text": "2.5.1 Computing centrality indices\nCreate new column of centrality_betweenness\n\n\nShow the code\ng <- GAStech_graph %>% \n  mutate(between_centrality = centrality_betweenness()) %>% \n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(width=Frequency), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n                      size = between_centrality) \n                  )\n\ng\n\n\n\n\n\nAutomatically compute in ggraph v2.0\n\n\nShow the code\ng <- GAStech_graph %>% \n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(width=Frequency), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\n\ng"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-community",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-community",
    "title": "Hands-on_Ex05",
    "section": "2.5.2 Visualising Community",
    "text": "2.5.2 Visualising Community\n\n\nShow the code\ng <- GAStech_graph %>% \n  mutate(community = as.factor(group_edge_betweenness(\n    weights = Frequency,directed = TRUE))) %>% \n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(width=Frequency), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = community) \n                  )\n\ng"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-preparation",
    "title": "Hands-on_Ex05",
    "section": "2.6.1 Data preparation",
    "text": "2.6.1 Data preparation\nvisNetwork() function uses a nodes list and edges list to create an interactive graph.\nThe nodes list must include an “id” column, and the edge list must have “from” and “to” columns. The function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.\n\n\nShow the code\nGAStech_edges_aggregated <- GAStech_edges %>%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %>%\n  rename(from = id) %>%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %>%\n  rename(to = id) %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(from, to) %>%\n    summarise(weight = n(), .groups = \"drop\") %>%\n  filter(from!=to) %>%\n  filter(weight > 1) \n\nglimpse(GAStech_edges_aggregated)\n\n\nRows: 839\nColumns: 3\n$ from   <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ to     <dbl> 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,…\n$ weight <int> 21, 21, 21, 21, 21, 21, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#interactive-network-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#interactive-network-graph",
    "title": "Hands-on_Ex05",
    "section": "2.6.2 Interactive network graph",
    "text": "2.6.2 Interactive network graph\n\n\nShow the code\nvisNetwork(GAStech_nodes, GAStech_edges_aggregated)\n\n\n\n\n\n\nChange layout\n\n\nShow the code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#grouping-node",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#grouping-node",
    "title": "Hands-on_Ex05",
    "section": "2.6.3 Grouping node",
    "text": "2.6.3 Grouping node\nRename Department field to group\n\n\nShow the code\nGAStech_nodes <- GAStech_nodes %>% \n  rename(group = Department)\n\n\nAssigning unique colour to each category in the group field\n\n\nShow the code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>% \n  visLegend() %>% \n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-edges",
    "title": "Hands-on_Ex05",
    "section": "2.6.4 Changing edges",
    "text": "2.6.4 Changing edges\n\nThe argument arrows is used to define where to place the arrow.\nThe smooth argument is used to plot the edges using a smooth curve.\n\n\n\nShow the code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>% \n  visEdges(arrows = \"to\",\n           smooth = list(enabled = TRUE,\n                         type = \"curvedCW\")) %>% \n  visLegend() %>% \n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#interactive-option-bar",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#interactive-option-bar",
    "title": "Hands-on_Ex05",
    "section": "2.6.5 Interactive option bar",
    "text": "2.6.5 Interactive option bar\nisOptions() is used to incorporate interactivity features in the data visualisation. - The argument highlightNearest highlights nearest when clicking a node. - The argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\nShow the code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>% \n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %>% \n  visLegend() %>% \n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on_Ex06",
    "section": "",
    "text": "pacman::p_load('plotly', 'tidyverse','ggstatsplot')\n\n\nrequire(devtools)\n\n\n\n\n\nggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plot\n\n\n\n\n\npop_data <- read_csv(\"data/respopagsex2000to2018_tidy.csv\")\nglimpse(pop_data)\n\nRows: 108,126\nColumns: 5\n$ PA         <chr> \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"An…\n$ SZ         <chr> \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo…\n$ AG         <chr> \"AGE0-4\", \"AGE0-4\", \"AGE0-4\", \"AGE0-4\", \"AGE0-4\", \"AGE0-4\",…\n$ Year       <dbl> 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2011, 2012,…\n$ Population <dbl> 290, 270, 260, 250, 260, 250, 200, 180, 290, 290, 270, 300,…\n\n\nDerive three new measures, namely: young, active, and old\n\nagpop_mutated <- pop_data %>% \n  mutate(Year = as.character(Year)) %>% \n# use pivot_wider to seperate Unique values in AG into distinct columns, fill with corresponding Population value\n  pivot_wider(names_from = AG, values_from = Population) %>% \n#calculate the sum of values in columns 4 to 8 (AG columns) for each row\n  mutate(YOUNG = rowSums(.[4:8])) %>% \n  mutate(ACTIVE  = rowSums(.[9:16])) %>% \n  mutate(OLD  = rowSums(.[17:21])) %>% \n  mutate(TOTAL  = rowSums(.[22:24])) %>% \n  filter(Year == 2018) %>% \n  filter(TOTAL > 0)\n  \nhead(agpop_mutated)\n\n# A tibble: 6 × 25\n  PA         SZ       Year  `AGE0-4` `AGE10-14` `AGE15-19` `AGE20-24` `AGE25-29`\n  <chr>      <chr>    <chr>    <dbl>      <dbl>      <dbl>      <dbl>      <dbl>\n1 Ang Mo Kio Ang Mo … 2018       180        320        300        260        300\n2 Ang Mo Kio Cheng S… 2018      1060       1080       1260       1400       1880\n3 Ang Mo Kio Chong B… 2018       900       1030       1220       1380       1760\n4 Ang Mo Kio Kebun B… 2018       720       1010       1120       1230       1460\n5 Ang Mo Kio Sembawa… 2018       220        380        500        550        500\n6 Ang Mo Kio Shangri… 2018       550        670        780        950       1080\n# ℹ 17 more variables: `AGE30-34` <dbl>, `AGE35-39` <dbl>, `AGE40-44` <dbl>,\n#   `AGE45-49` <dbl>, `AGE05-9` <dbl>, `AGE50-54` <dbl>, `AGE55-59` <dbl>,\n#   `AGE60-64` <dbl>, `AGE65-69` <dbl>, `AGE70-74` <dbl>, `AGE75-79` <dbl>,\n#   `AGE80-84` <dbl>, AGE85over <dbl>, YOUNG <dbl>, ACTIVE <dbl>, OLD <dbl>,\n#   TOTAL <dbl>\n\n\n\n\n\n\n\nggtern(data = agpop_mutated,aes(x= YOUNG, y = ACTIVE, z = OLD))+\n  geom_point()+\n  labs(title=\"Population structure, 2018\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\nlabel <- function(txt) { \n  # Defines a function named \"label\" that takes one argument \"txt\"\n  list( \n    text = txt,\n    x = 0.1, y = 1, \n    # Sets the x and y coordinates of the label (x:0 left, y:0 bottom)\n    xref = \"papaer\", yref = \"paper\", \n    # Sets label reference to \"paper\" (whole plot area)\n    align = \"center\", # Sets the alignment of the label text to the center\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    # Sets the font family to \"serif\"\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  ) #background/border color\n}\n\naxis <- function(txt){\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  ) # Sets the tick format to display percentages with no decimal places\n}\n\nternaryAxes <- list(\n  aaxis = axis(\"Young\"), # Configures the \"a\" axis with the title \"Young\"\n  baxis = axis(\"Active\"),\n  caxis = axis(\"OLD\")\n)\n\nplot_ly(\n  agpop_mutated,\n  a = ~YOUNG,\n  b = ~ACTIVE,\n  c = ~OLD,\n  color = I(\"black\"),\n  type = \"scatterternary\"\n) %>% \n  layout(\n    annotations = label(\"Ternary Markers\"),\n    ternary = ternaryAxes \n    # Assigns the \"ternaryAxes\" configuration to the ternary plot\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation-1",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation-1",
    "title": "Hands-on_Ex06",
    "section": "Data preparation",
    "text": "Data preparation\n\nImport package\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n\n\n\nImport data\n\nwine <- read_csv(\"data/wine_quality.csv\")\nglimpse(wine)\n\nRows: 6,497\nColumns: 13\n$ `fixed acidity`        <dbl> 7.4, 7.8, 7.8, 11.2, 7.4, 7.4, 7.9, 7.3, 7.8, 7…\n$ `volatile acidity`     <dbl> 0.700, 0.880, 0.760, 0.280, 0.700, 0.660, 0.600…\n$ `citric acid`          <dbl> 0.00, 0.00, 0.04, 0.56, 0.00, 0.00, 0.06, 0.00,…\n$ `residual sugar`       <dbl> 1.9, 2.6, 2.3, 1.9, 1.9, 1.8, 1.6, 1.2, 2.0, 6.…\n$ chlorides              <dbl> 0.076, 0.098, 0.092, 0.075, 0.076, 0.075, 0.069…\n$ `free sulfur dioxide`  <dbl> 11, 25, 15, 17, 11, 13, 15, 15, 9, 17, 15, 17, …\n$ `total sulfur dioxide` <dbl> 34, 67, 54, 60, 34, 40, 59, 21, 18, 102, 65, 10…\n$ density                <dbl> 0.9978, 0.9968, 0.9970, 0.9980, 0.9978, 0.9978,…\n$ pH                     <dbl> 3.51, 3.20, 3.26, 3.16, 3.51, 3.51, 3.30, 3.39,…\n$ sulphates              <dbl> 0.56, 0.68, 0.65, 0.58, 0.56, 0.56, 0.46, 0.47,…\n$ alcohol                <dbl> 9.4, 9.8, 9.8, 9.8, 9.4, 9.4, 9.4, 10.0, 9.5, 1…\n$ quality                <dbl> 5, 5, 5, 6, 5, 5, 5, 7, 7, 5, 5, 5, 5, 5, 5, 5,…\n$ type                   <chr> \"red\", \"red\", \"red\", \"red\", \"red\", \"red\", \"red\"…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#correlation-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#correlation-plot",
    "title": "Hands-on_Ex06",
    "section": "Correlation plot",
    "text": "Correlation plot\n\nCorrelation matrix\n\npairs(wine[,2:12])\n\n\n\n# selects columns 2 to 11\n\nShow the lower half of the correlation matrix (a correlation matrix is symmetric)\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\nDisplay upper half.\n\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\n\nShow correlation coefficients\n\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\n  usr <- par(\"usr\")     # Retrieves the current coordinate system from the graphics parameters\n  on.exit(par(usr))     # Sets the coordinate system back to the original after the function exits\n  par(usr = c(0, 1, 0, 1))  # Sets the coordinate system to cover the full plotting region\n  r <- abs(cor(x, y, use=\"complete.obs\"))  # Computes the correlation coefficient between x and y\n  txt <- format(c(r, 0.123456789), digits=digits)[1]  # Formats the correlation coefficient with the desired number of digits\n  txt <- paste(prefix, txt, sep=\"\")  # Prepends the prefix to the correlation coefficient text\n  if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)  # Determines the size of the correlation text based on its width\n  text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)  # Displays the correlation text in the center of the plot\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#use-ggcorrmat",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#use-ggcorrmat",
    "title": "Hands-on_Ex06",
    "section": "Use ggcorrmat",
    "text": "Use ggcorrmat\n\nMultiple plot\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 3, #text lab size\n                         tl.srt = 45,\n                        lab_size = 1), \n  #rotate the numerical values by 45 degree,\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    caption = \"Dataset: UCI Machine Learning\"\n  )\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#corrplot-package",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#corrplot-package",
    "title": "Hands-on_Ex06",
    "section": "Corrplot package",
    "text": "Corrplot package\n\nCompute the correlation\n\nwine.cor <- cor(wine[,1:11])\n\nBlue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. Darker colours indicate relatively stronger linear relationship between the paired variables.\n\nlibrary(corrplot)\ncorrplot(wine.cor)\n\n\n\n\n\n\nCustomize the design\nThe default is “full” which display full matrix, and circle shape.\nCan change by method and type.\ndiag and tl.col are used to turn off the diagonal cells and to change the axis text label colour.\n\ncorrplot(wine.cor,\n         method = \"ellipse\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\n\nMixed layout\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               number.cex=0.5,\n               tl.pos = \"lt\", #text labels should be positioned at the left-top corner of each cell\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\nCombining corrgram with the significant test\nCompute the p-values and confidence interval for each pair of variables\n\nwine.sig = cor.mtest(wine.cor, conf.level = 0.95)\n\n\ncorrplot(wine.cor,\n         method =\"number\",\n         type = \"lower\",\n         diag = FALSE,\n         number.cex=0.5,\n         tl.col = \"black\",\n         p.mat = wine.sig$p,\n         sig.level = 0.95)\n\n\n\n\n\n\nReorder corrgram\n“AOE” is for the angular order of the eigenvectors.\n\ncorrplot.mixed(wine.cor,\n               lower =\"ellipse\",\n               upper =\"number\",\n               number.cex=0.5,\n               tl.pos = \"lt\", #left-top corner\n               order =\"AOE\",\n               tl.col =\"black\",\n               tl.cex = 0.8) #adjust word size\n\n\n\n\nUsing hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3) #specific cells or regions that will be highlighted depend on the correlation matrix and the highest absolute correlation values"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#import-data-2",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#import-data-2",
    "title": "Hands-on_Ex06",
    "section": "Import data",
    "text": "Import data"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation-2",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation-2",
    "title": "Hands-on_Ex06",
    "section": "Data preparation",
    "text": "Data preparation\n\nInstall package\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse,dplyr)\n\n\n\nImport data\n\nwh <- read_csv(\"data/WHData-2018.csv\")\nglimpse(wh)\n\nRows: 156\nColumns: 12\n$ Country                        <chr> \"Albania\", \"Bosnia and Herzegovina\", \"B…\n$ Region                         <chr> \"Central and Eastern Europe\", \"Central …\n$ `Happiness score`              <dbl> 4.586, 5.129, 4.933, 5.321, 6.711, 5.73…\n$ `Whisker-high`                 <dbl> 4.695, 5.224, 5.022, 5.398, 6.783, 5.81…\n$ `Whisker-low`                  <dbl> 4.477, 5.035, 4.844, 5.244, 6.639, 5.66…\n$ Dystopia                       <dbl> 1.462, 1.883, 1.219, 1.769, 2.494, 1.45…\n$ `GDP per capita`               <dbl> 0.916, 0.915, 1.054, 1.115, 1.233, 1.20…\n$ `Social support`               <dbl> 0.817, 1.078, 1.515, 1.161, 1.489, 1.53…\n$ `Healthy life expectancy`      <dbl> 0.790, 0.758, 0.712, 0.737, 0.854, 0.73…\n$ `Freedom to make life choices` <dbl> 0.419, 0.280, 0.359, 0.380, 0.543, 0.55…\n$ Generosity                     <dbl> 0.149, 0.216, 0.064, 0.120, 0.064, 0.08…\n$ `Perceptions of corruption`    <dbl> 0.032, 0.000, 0.009, 0.039, 0.034, 0.17…\n\n\n\n\nTurn dataframe into matrix.\n\nwh_matrix <- data.matrix(wh)\nrow.names(wh_matrix) <- wh$Country"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#create-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#create-heatmap",
    "title": "Hands-on_Ex06",
    "section": "Create heatmap",
    "text": "Create heatmap\nThe arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\nheatmap(wh_matrix,\nRowv = NA,\nColv = NA)\n\n\n\n\n\nWith dendrogram\nHeatmap does a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity.\n\nheatmap(wh_matrix)\n\n\n\n\n\n\nNormalize data\nNormalize the data so each columns in matrix have similar range.\nThe code chunk below normalises the matrix column-wise.\nMargins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels.\n\nwh_heatmap <- heatmap(wh_matrix,\n                      scale = \"column\",\n                      cexRow = 0.6,\n                      cexCol = 0.8,\n                      margins = c(10,4))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#interactive-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#interactive-heatmap",
    "title": "Hands-on_Ex06",
    "section": "Interactive Heatmap",
    "text": "Interactive Heatmap\n\nheatmaply(wh_matrix[,-c(1,2,4,5)],\n          fontsize_row = 2)\n\n\n\n\n\n\nData transformation\nScaling method\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nheatmaply(wh_matrix[,-c(1,2,4,5)],\n          fontsize_row = 2,\n          scale = \"column\")\n\n\n\n\n\nNormalising method\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nwh_matrix_1 = wh_matrix[, -c(1, 2, 4, 5)]\nnormalized_matrix <- as.matrix(normalize(wh_matrix_1))\nheatmaply(normalize(normalized_matrix),\n          fontsize_row = 2)\n\n\n\n\n\nPercentising method\nThe values in each column will be transformed into their corresponding percentile ranks within that column\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]),\n          fontsize_row = 2)\n\n\n\n\n\n\n\nClustering algorithm\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          fontsize_row = 2,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns.\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms.\n\ndist_method results in “euclidean” to be used here, can also be “euclidean”, “maximum”, “binary” or so on.\nhclust_method can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average”.\n\n\nStatistical approah\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\n# dist is to calculate the Euclidean distance matrix between the rows\nwh_d <- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n             method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nFrom the table above, the output table shows that “average” method should be used because it gave the high optimum value.\nfind_k() is used to determine the optimal number of cluster\n\nFigure above shows that k=3 would be good.\n\nwh_clust <- hclust(wh_d, method =\"average\")\nnum_k <- find_k(wh_clust)\nplot(num_k)\n\n\n\n\nPlot the heatmap after determine the statistical result\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          fontsize_row = 2,\n          k_row = 3,\n          dist_method = \"euclidean\",\n          hclust_method = \"average\")\n\n\n\n\n\nheatmaply uses the seriation (系統化) package to find an optimal ordering of rows and columns. Optimal means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized.\nThere are methods such as OLO” (Optimal leaf ordering) and GW(more efficient).\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          fontsize_row = 2,\n          seriate = \"OLO\")\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          fontsize_row = 2,\n          seriate = \"none\")\n\n\n\n\n\n\n\nWorking with colour palettes\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          fontsize_row = 2,\n          seriate = \"none\",\n          colors = Blues)\n\n\n\n\n\n\n\nCustomize the heatmap\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsize_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          fontsize_row = 2,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_col = 4,\n          main = \"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation-3",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation-3",
    "title": "Hands-on_Ex06",
    "section": "Data preparation",
    "text": "Data preparation\n\npacman::p_load(GGally,parallelPlot,tidyverse)\n\n\nwh <- read_csv(\"data/WHData-2018.csv\")\nglimpse(wh)\n\nRows: 156\nColumns: 12\n$ Country                        <chr> \"Albania\", \"Bosnia and Herzegovina\", \"B…\n$ Region                         <chr> \"Central and Eastern Europe\", \"Central …\n$ `Happiness score`              <dbl> 4.586, 5.129, 4.933, 5.321, 6.711, 5.73…\n$ `Whisker-high`                 <dbl> 4.695, 5.224, 5.022, 5.398, 6.783, 5.81…\n$ `Whisker-low`                  <dbl> 4.477, 5.035, 4.844, 5.244, 6.639, 5.66…\n$ Dystopia                       <dbl> 1.462, 1.883, 1.219, 1.769, 2.494, 1.45…\n$ `GDP per capita`               <dbl> 0.916, 0.915, 1.054, 1.115, 1.233, 1.20…\n$ `Social support`               <dbl> 0.817, 1.078, 1.515, 1.161, 1.489, 1.53…\n$ `Healthy life expectancy`      <dbl> 0.790, 0.758, 0.712, 0.737, 0.854, 0.73…\n$ `Freedom to make life choices` <dbl> 0.419, 0.280, 0.359, 0.380, 0.543, 0.55…\n$ Generosity                     <dbl> 0.149, 0.216, 0.064, 0.120, 0.064, 0.08…\n$ `Perceptions of corruption`    <dbl> 0.032, 0.000, 0.009, 0.039, 0.034, 0.17…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-static-parallel-coordinates-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-static-parallel-coordinates-plot",
    "title": "Hands-on_Ex06",
    "section": "Plotting Static Parallel Coordinates Plot",
    "text": "Plotting Static Parallel Coordinates Plot\nWith boxplot\n\ngroupColumn argument is used to group the observations ( by using a single variable (i.e. here is Region) and color the parallel coordinates lines\nscale argument is used to scale the variables in the parallel coordinate plot. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot. The default is FALSE.\n\n\nggparcoord(data = wh,\n           columns = c(7:12),\n           groupColumn = 2,\n           scale =\"uniminmax\",\n           alphaLines  = 0.2,\n           boxplot = TRUE,\n           title = \"Parallel Coordinates Plot of World Happines Variables\")+ theme(legend.position = \"right\",                                                 axis.text = element_text(size = 4))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#parallel-coordinates-with-facet",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#parallel-coordinates-with-facet",
    "title": "Hands-on_Ex06",
    "section": "Parallel coordinates with facet",
    "text": "Parallel coordinates with facet\nhjust argument accepts a value between 0 and 1, where 0 represents left justification, 0.5 represents center justification, and 1 represents right justification.\n\nggparcoord(data = wh,\n           columns = c(7:12),\n           groupColumn = 2,\n           scale =\"uniminmax\",\n           alphaLines  = 0.2,\n           boxplot = TRUE,\n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\")+\n  facet_wrap(~ Region)+ #use angle and hjust to avoid text to overlap\n  theme(axis.text.x = element_text(angle = 30,hjust = 1),\n        axis.text = element_text(size = 4),\n        strip.text = element_text(size = 5))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#interactive-parallel-coordinates-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#interactive-parallel-coordinates-plot",
    "title": "Hands-on_Ex06",
    "section": "Interactive Parallel Coordinates Plot",
    "text": "Interactive Parallel Coordinates Plot\n\nwh <- wh %>% \n  select(\"Happiness score\",c(7:12))\n\nchange the default blue colour scheme by using continousCS argument\n\nparallelPlot(wh,\n             width = 320,\n             height = 250,\n             rotateTitle = TRUE,\n             continuousCS = \"YlOrRd\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#parallel-coordinates-plot-with-histogram",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#parallel-coordinates-plot-with-histogram",
    "title": "Hands-on_Ex06",
    "section": "Parallel coordinates plot with histogram",
    "text": "Parallel coordinates plot with histogram\n\nhistoVisibility <- rep(TRUE,ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation-4",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation-4",
    "title": "Hands-on_Ex06",
    "section": "Data preparation",
    "text": "Data preparation\n\npacman::p_load(treemap, treemapify, tidyverse)\n\n\nrealis2018 <- read_csv(\"data/realis2018.csv\")\nglimpse(realis2018)\n\nRows: 23,205\nColumns: 20\n$ `Project Name`                <chr> \"ADANA @ THOMSON\", \"ALANA\", \"ALANA\", \"AL…\n$ Address                       <chr> \"8 Old Upper Thomson Road  #05-03\", \"156…\n$ `No. of Units`                <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ `Area (sqm)`                  <dbl> 52, 284, 256, 256, 277, 285, 234, 155, 1…\n$ `Type of Area`                <chr> \"Strata\", \"Strata\", \"Strata\", \"Strata\", …\n$ `Transacted Price ($)`        <dbl> 888888, 2530000, 2390863, 2450000, 19800…\n$ `Nett Price($)`               <chr> \"-\", \"-\", \"2382517\", \"2441654\", \"-\", \"-\"…\n$ `Unit Price ($ psm)`          <dbl> 17094, 8908, 9307, 9538, 7148, 6947, 147…\n$ `Unit Price ($ psf)`          <dbl> 1588, 828, 865, 886, 664, 645, 1371, 149…\n$ `Sale Date`                   <chr> \"4-Jul-18\", \"5-Oct-18\", \"9-Jun-18\", \"14-…\n$ `Property Type`               <chr> \"Apartment\", \"Terrace House\", \"Terrace H…\n$ Tenure                        <chr> \"Freehold\", \"103 Yrs From 12/08/2013\", \"…\n$ `Completion Date`             <chr> \"2018\", \"2018\", \"2018\", \"2018\", \"2008\", …\n$ `Type of Sale`                <chr> \"New Sale\", \"Sub Sale\", \"New Sale\", \"New…\n$ `Purchaser Address Indicator` <chr> \"Private\", \"Private\", \"HDB\", \"N.A\", \"Pri…\n$ `Postal District`             <dbl> 20, 28, 28, 28, 26, 26, 26, 26, 26, 26, …\n$ `Postal Sector`               <dbl> 57, 80, 80, 80, 78, 78, 78, 78, 78, 78, …\n$ `Postal Code`                 <dbl> 573868, 804555, 804529, 804540, 786300, …\n$ `Planning Region`             <chr> \"North East Region\", \"North East Region\"…\n$ `Planning Area`               <chr> \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\"…\n\n\n\nGrouped summaries without the Pipe\nAggregation functions such as sum() and meadian() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\nrealis2018_summarised <- realis2018 %>% \n  group_by(`Project Name`,`Planning Region`, `Planning Area`, `Property Type`, `Type of Sale`) %>% \nsummarise(\n`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n`Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n`Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n`Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE), .groups = \"drop\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#designing-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#designing-treemap",
    "title": "Hands-on_Ex06",
    "section": "Designing Treemap",
    "text": "Designing Treemap\n\nDesigning a static treemap\n\nrealis_selected <- realis2018_summarised %>% \n  filter(`Property Type` == \"Condominium\", \n         `Type of Sale` == \"Resale\")\nrealis_selected\n\n# A tibble: 626 × 9\n   `Project Name`        `Planning Region` `Planning Area` `Property Type`\n   <chr>                 <chr>             <chr>           <chr>          \n 1 1 KING ALBERT PARK    Central Region    Bukit Timah     Condominium    \n 2 3 ORCHARD BY-THE-PARK Central Region    Orchard         Condominium    \n 3 368 THOMSON           Central Region    Novena          Condominium    \n 4 6 DERBYSHIRE          Central Region    Novena          Condominium    \n 5 8 @ MOUNT SOPHIA      Central Region    Rochor          Condominium    \n 6 8 NAPIER              Central Region    Tanglin         Condominium    \n 7 8 SAINT THOMAS        Central Region    River Valley    Condominium    \n 8 8@WOODLEIGH           Central Region    Toa Payoh       Condominium    \n 9 A TREASURE TROVE      North East Region Punggol         Condominium    \n10 AALTO                 Central Region    Marine Parade   Condominium    \n# ℹ 616 more rows\n# ℹ 5 more variables: `Type of Sale` <chr>, `Total Unit Sold` <dbl>,\n#   `Total Area` <dbl>, `Median Unit Price ($ psm)` <dbl>,\n#   `Median Transacted Price` <dbl>\n\n\n\ntreemap(realis_selected,\n        index = c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize = \"Total Unit Sold\",\n        # need to define type so that vColor can wotk\n        type = \"value\",\n        vColor = \"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\")\n\n\n\n\n\nindex The index vector must consist of at least two column names or else no hierarchy treemap will be plotted. If multiple column names are provided, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\nvSize The column must not contain negative values.\n\n\n\nThe “value” type treemap\n\ntreemap(realis_selected,\n        index = c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize = \"Total Unit Sold\",\n        # need to define type so that vColor can wotk\n        type = \"value\",\n        vColor = \"Median Unit Price ($ psm)\",\n        palette = \"RdYlBu\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\")\n\n\n\n\n\n\nThe “manual” type treemap\nThe “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.\n\ntreemap(realis_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\nIt is not wise to use diverging colour palette if the values are all positive or negative, which leading to confusion.\nUse single color palette instead:\n\ntreemap(realis_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\nTreemap Layout\nThe squarified treemap algorithm produces good aspect ratios, but ignores the sorting order of the rectangles. (In this layout, the rectangles are arranged in a way that aims to maximize the aspect ratio similarity, meaning that the rectangles are as close to a square shape as possible.)\n\ntreemap(realis_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        algorithm = \"squarified\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right. (The size of each rectangle represents a variable (vSize in this case). The rectangles are arranged hierarchically,can be useful when you want to emphasize the relative size of the rectangles representing a specific variable.)\n\ntreemap(realis_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#treemapify-package",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#treemapify-package",
    "title": "Hands-on_Ex06",
    "section": "treemapify Package",
    "text": "treemapify Package\n\nggplot(data = realis_selected,\n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\")+\n  geom_treemap()+\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n\n\n\n\n\nGroup by\nGroup by Planning Region, planning area\n\nggplot(data = realis_selected,\n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\nAdd boundary line\n\nggplot(data = realis_selected,\n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()+\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2)+\n  geom_treemap_subgroup_border(colour = \"green\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#interactive-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#interactive-treemap",
    "title": "Hands-on_Ex06",
    "section": "Interactive treemap",
    "text": "Interactive treemap\n\nlibrary(d3treeR)\n\n\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\n\n\ntm <- treemap(realis2018_summarised,\n       index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n         title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\")\n\n\n\n\n\nd3tree(tm,rootname = \"Singapore\" )\n\n\n\n\n\n\n\n\n\n\n\n\na8cf15a370c7cd3e626dd6cde0e3ed219de85c98"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual Analytics and Applications",
    "section": "",
    "text": "Welcome to Visual Analytics and Applications homepage. In this website, you will find my coursework and portfolio prepared for this course.\nYou can find my contact information in ABOUT ME section."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In Class Exercise 1",
    "section": "",
    "text": "pacman::p_load(tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-data",
    "title": "In Class Exercise 1",
    "section": "Import data",
    "text": "Import data\n\nexam_data <- read.csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#horizontal-bar-chart",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#horizontal-bar-chart",
    "title": "In Class Exercise 1",
    "section": "Horizontal bar chart",
    "text": "Horizontal bar chart\n\nggplot(data=exam_data,\n       aes(x=RACE))+\n  geom_bar()+\n  coord_flip()+\n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill='lightblue',color = 'lightblue'),\n    panel.grid.major = element_line(colour = 'white',size = 0.5,linewidth =  'solid'),\n    panel.grid.minor = element_line(colour = 'white',size=0.25,linewidth = 'solid')\n  )\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\n\n\n\n\nBar chart with label\n\nBar chart with label 1. function(x) counts the occurrence frequency of different x and minor constant length(x), allowing x axis to sort by the count value by descending order.\nstate=“count” indicate will use count method and applies to ..count.. and the plot\naes() to map with variables in the plot. paste0 is to concatenate strings\n“after_stat(count)” or “..count..”(new version) means count of observations in each category\nvjust is the lable position, -1 means a little above from the bar.\nuse theme(axis.title.y to adjust y axis title angle)\n\n\nggplot(data=exam_data,aes(x=reorder(RACE,RACE,function(x)-length(x))))+\n  geom_bar()+\n  ylim(0,220)+\n  xlab(\"RACE\")+\n  ylab(\"No. of \\nPupils\")+\n  geom_text(stat =\"count\",aes(label=paste0(after_stat(count),\",\",                                       round(after_stat(count)/sum(after_stat(count))*100,1),\"%\")),\n            vjust=-1)+\n  theme(axis.title.y=element_text(angle=0))\n\n\n\n\n\n\nUse fct_infreq() of forcats package\n\nUse Command + Shift + M to type %>%\nfct_infreq can count the occurrence frequency of each category, and reorder by descending order\nMutate create a new column, and use %>% to modify and apply new changes to the data frame.\n\n\nexam_data %>% \n  mutate(RACE=fct_infreq(RACE)) %>% \n  ggplot(aes(RACE))+\n  geom_bar()+\n  ylim(0,220)+\n  xlab(\"RACE\")+\n  ylab(\"No. of \\nPupils\")+\n  geom_text(stat =\"count\",aes(label=paste0(after_stat(count),\",\",                                       round(after_stat(count)/sum(after_stat(count))*100,1),\"%\")),\n            vjust=-1)+\n  theme(axis.title.y=element_text(angle=0))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#histogram",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#histogram",
    "title": "In Class Exercise 1",
    "section": "Histogram",
    "text": "Histogram\n\nAdd mean and median line\n\nUse vline to draw vertical line.\nxintercept as x-axis variable of MATHS\nna.rm=T(True), means apply method of removing missing values before caculating mean.\n\n\nggplot(data=exam_data,aes(MATHS))+\n  geom_histogram(bins=20,boundary=100,fill='lightblue',color='black')+\n  geom_vline(aes(xintercept=mean(MATHS,na.rm=T)),color='red',\n             linetype='dashed',size=1)+\n  geom_vline(aes(xintercept=median(MATHS,na.rm=TRUE)),color='grey',linetype='dashed',\n             size=1)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\nColor comparison and facet grid\n\nguides(fill=FALSE) means to turn off legend\ncreate new histogram, one use sub_data without gender column, one use data and with black line and fill different color by gender.\n\n\ndata <- exam_data\nsub_data <- data[,-3]\n\nggplot(data,aes(x=ENGLISH,fill=GENDER))+\n  geom_histogram(data=sub_data,fill='grey',alpha=0.5)+\n  geom_histogram(colour='black')+\n  facet_wrap(~GENDER)+\n  guides(fill=FALSE)+\n  theme_bw()\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#scatter-plot-with-quadrant",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#scatter-plot-with-quadrant",
    "title": "In Class Exercise 1",
    "section": "Scatter plot with quadrant",
    "text": "Scatter plot with quadrant\n\nggplot(data=exam_data,aes(x=MATHS,y=ENGLISH))+\n  geom_point()+\n  coord_cartesian(xlim=c(0,100),ylim=c(0,100))+\n  geom_hline(aes(yintercept=50),color='grey',size=1,linetype='dashed')+\n  geom_vline(aes(xintercept=50),color='grey',size=1,linetype='dashed')"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class_Ex03",
    "section": "",
    "text": "Tableau Public: https://public.tableau.com/app/profile/yun.hsuan.yen"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class_Ex04",
    "section": "",
    "text": "rstatix: transform the statistic test result into data table instead of just text\n\n\nShow code\npacman::p_load(rstatix,gt,patchwork,tidyverse)\n\n\n\nlibrary(magrittr) # needs to be run every time you start R and want to use %>%\nlibrary(vctrs)\n\n\nlibrary(readr)\nexam_data <- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#plot-qq-plot",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#plot-qq-plot",
    "title": "In-class_Ex04",
    "section": "Plot QQ plot",
    "text": "Plot QQ plot\nQQ plot examine the sample data, so write sample=ENGLISH in the ggplot aes. Create stat_qq with normality distribution, and one line from the sample.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam_data,\n       aes(sample=ENGLISH))+\n  stat_qq()+\n  stat_qq_line()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class_Ex05",
    "section": "",
    "text": "Show the code\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts,jsonlite)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#extract-data-frame-from-mc1-list-as-tibble-table",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#extract-data-frame-from-mc1-list-as-tibble-table",
    "title": "In-class_Ex05",
    "section": "Extract data frame from MC1 list as tibble table",
    "text": "Extract data frame from MC1 list as tibble table\nUse select to pick columns and reorganize the sequence of data frame\n\n\nShow the code\nMC1_noeds <- as_tibble(MC1$nodes) %>% \n  select(id,type,country)\n\n\n\n\nShow the code\nMC1_edges <- as_tibble(MC1$links) %>% \n  select(source,target,type,weight,key)"
  }
]